// Code generated by protoc-gen-go.
// source: fileserver.proto
// DO NOT EDIT!

/*
Package fileserver is a generated protocol buffer package.

It is generated from these files:
	fileserver.proto

It has these top-level messages:
	ServeResponse
	ServeRequest
	UnServeRequest
	ListServeRequest
	ListServeResponse
	ServedFiles
*/
package fileserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServeResponse struct {
	ServeResponse string `protobuf:"bytes,1,opt,name=ServeResponse" json:"ServeResponse,omitempty"`
	ServerPort    string `protobuf:"bytes,2,opt,name=ServerPort" json:"ServerPort,omitempty"`
}

func (m *ServeResponse) Reset()         { *m = ServeResponse{} }
func (m *ServeResponse) String() string { return proto.CompactTextString(m) }
func (*ServeResponse) ProtoMessage()    {}

type ServeRequest struct {
	Uuid     string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	FilePath string `protobuf:"bytes,2,opt,name=FilePath" json:"FilePath,omitempty"`
	FileData []byte `protobuf:"bytes,3,opt,name=FileData,proto3" json:"FileData,omitempty"`
	Timeout  int32  `protobuf:"varint,4,opt,name=Timeout" json:"Timeout,omitempty"`
	Limit    int32  `protobuf:"varint,5,opt,name=Limit" json:"Limit,omitempty"`
}

func (m *ServeRequest) Reset()         { *m = ServeRequest{} }
func (m *ServeRequest) String() string { return proto.CompactTextString(m) }
func (*ServeRequest) ProtoMessage()    {}

type UnServeRequest struct {
	Uuid     string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	FilePath string `protobuf:"bytes,2,opt,name=FilePath" json:"FilePath,omitempty"`
}

func (m *UnServeRequest) Reset()         { *m = UnServeRequest{} }
func (m *UnServeRequest) String() string { return proto.CompactTextString(m) }
func (*UnServeRequest) ProtoMessage()    {}

type ListServeRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
}

func (m *ListServeRequest) Reset()         { *m = ListServeRequest{} }
func (m *ListServeRequest) String() string { return proto.CompactTextString(m) }
func (*ListServeRequest) ProtoMessage()    {}

type ListServeResponse struct {
	Data []*ServedFiles `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *ListServeResponse) Reset()         { *m = ListServeResponse{} }
func (m *ListServeResponse) String() string { return proto.CompactTextString(m) }
func (*ListServeResponse) ProtoMessage()    {}

func (m *ListServeResponse) GetData() []*ServedFiles {
	if m != nil {
		return m.Data
	}
	return nil
}

type ServedFiles struct {
	FilePath       string `protobuf:"bytes,1,opt,name=FilePath" json:"FilePath,omitempty"`
	FileHash       string `protobuf:"bytes,2,opt,name=FileHash" json:"FileHash,omitempty"`
	AccessLimit    int32  `protobuf:"varint,3,opt,name=AccessLimit" json:"AccessLimit,omitempty"`
	ExpirationTime string `protobuf:"bytes,4,opt,name=ExpirationTime" json:"ExpirationTime,omitempty"`
}

func (m *ServedFiles) Reset()         { *m = ServedFiles{} }
func (m *ServedFiles) String() string { return proto.CompactTextString(m) }
func (*ServedFiles) ProtoMessage()    {}

func init() {
	proto.RegisterType((*ServeResponse)(nil), "fileserver.ServeResponse")
	proto.RegisterType((*ServeRequest)(nil), "fileserver.ServeRequest")
	proto.RegisterType((*UnServeRequest)(nil), "fileserver.UnServeRequest")
	proto.RegisterType((*ListServeRequest)(nil), "fileserver.ListServeRequest")
	proto.RegisterType((*ListServeResponse)(nil), "fileserver.ListServeResponse")
	proto.RegisterType((*ServedFiles)(nil), "fileserver.ServedFiles")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Fileserver service

type FileserverClient interface {
	// Discovery Calls
	ServeFile(ctx context.Context, in *ServeRequest, opts ...grpc.CallOption) (*ServeResponse, error)
	UnServeFile(ctx context.Context, in *UnServeRequest, opts ...grpc.CallOption) (*ServeResponse, error)
	ListServer(ctx context.Context, in *ListServeRequest, opts ...grpc.CallOption) (*ListServeResponse, error)
}

type fileserverClient struct {
	cc *grpc.ClientConn
}

func NewFileserverClient(cc *grpc.ClientConn) FileserverClient {
	return &fileserverClient{cc}
}

func (c *fileserverClient) ServeFile(ctx context.Context, in *ServeRequest, opts ...grpc.CallOption) (*ServeResponse, error) {
	out := new(ServeResponse)
	err := grpc.Invoke(ctx, "/fileserver.Fileserver/ServeFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserverClient) UnServeFile(ctx context.Context, in *UnServeRequest, opts ...grpc.CallOption) (*ServeResponse, error) {
	out := new(ServeResponse)
	err := grpc.Invoke(ctx, "/fileserver.Fileserver/UnServeFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserverClient) ListServer(ctx context.Context, in *ListServeRequest, opts ...grpc.CallOption) (*ListServeResponse, error) {
	out := new(ListServeResponse)
	err := grpc.Invoke(ctx, "/fileserver.Fileserver/ListServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fileserver service

type FileserverServer interface {
	// Discovery Calls
	ServeFile(context.Context, *ServeRequest) (*ServeResponse, error)
	UnServeFile(context.Context, *UnServeRequest) (*ServeResponse, error)
	ListServer(context.Context, *ListServeRequest) (*ListServeResponse, error)
}

func RegisterFileserverServer(s *grpc.Server, srv FileserverServer) {
	s.RegisterService(&_Fileserver_serviceDesc, srv)
}

func _Fileserver_ServeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FileserverServer).ServeFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Fileserver_UnServeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(UnServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FileserverServer).UnServeFile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Fileserver_ListServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ListServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FileserverServer).ListServer(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Fileserver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fileserver.Fileserver",
	HandlerType: (*FileserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServeFile",
			Handler:    _Fileserver_ServeFile_Handler,
		},
		{
			MethodName: "UnServeFile",
			Handler:    _Fileserver_UnServeFile_Handler,
		},
		{
			MethodName: "ListServer",
			Handler:    _Fileserver_ListServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
