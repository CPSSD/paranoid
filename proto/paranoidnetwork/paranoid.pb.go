// Code generated by protoc-gen-go.
// source: paranoidnetwork/paranoid.proto
// DO NOT EDIT!

/*
Package paranoid is a generated protocol buffer package.

It is generated from these files:
	paranoidnetwork/paranoid.proto

It has these top-level messages:
	EmptyMessage
	Node
	JoinClusterRequest
	NewGenerationRequest
	NewGenerationResponse
	KeyPieceRequest
	KeyPiece
	KeyPieceSend
	SendKeyPieceResponse
*/
package paranoid

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Node struct {
	Ip         string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port       string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	CommonName string `protobuf:"bytes,3,opt,name=common_name,json=commonName" json:"common_name,omitempty"`
	Uuid       string `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type JoinClusterRequest struct {
	Ip           string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port         string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	CommonName   string `protobuf:"bytes,3,opt,name=common_name,json=commonName" json:"common_name,omitempty"`
	Uuid         string `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	PoolPassword string `protobuf:"bytes,5,opt,name=pool_password,json=poolPassword" json:"pool_password,omitempty"`
}

func (m *JoinClusterRequest) Reset()                    { *m = JoinClusterRequest{} }
func (m *JoinClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinClusterRequest) ProtoMessage()               {}
func (*JoinClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NewGenerationRequest struct {
	RequestingNode *Node  `protobuf:"bytes,1,opt,name=requesting_node,json=requestingNode" json:"requesting_node,omitempty"`
	PoolPassword   string `protobuf:"bytes,2,opt,name=pool_password,json=poolPassword" json:"pool_password,omitempty"`
}

func (m *NewGenerationRequest) Reset()                    { *m = NewGenerationRequest{} }
func (m *NewGenerationRequest) String() string            { return proto.CompactTextString(m) }
func (*NewGenerationRequest) ProtoMessage()               {}
func (*NewGenerationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewGenerationRequest) GetRequestingNode() *Node {
	if m != nil {
		return m.RequestingNode
	}
	return nil
}

type NewGenerationResponse struct {
	GenerationNumber int64    `protobuf:"varint,1,opt,name=generation_number,json=generationNumber" json:"generation_number,omitempty"`
	Peers            []string `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
}

func (m *NewGenerationResponse) Reset()                    { *m = NewGenerationResponse{} }
func (m *NewGenerationResponse) String() string            { return proto.CompactTextString(m) }
func (*NewGenerationResponse) ProtoMessage()               {}
func (*NewGenerationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type KeyPieceRequest struct {
	Node       *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Generation int64 `protobuf:"varint,2,opt,name=generation" json:"generation,omitempty"`
}

func (m *KeyPieceRequest) Reset()                    { *m = KeyPieceRequest{} }
func (m *KeyPieceRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyPieceRequest) ProtoMessage()               {}
func (*KeyPieceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *KeyPieceRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type KeyPiece struct {
	Data              []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ParentFingerprint []byte `protobuf:"bytes,2,opt,name=parent_fingerprint,json=parentFingerprint,proto3" json:"parent_fingerprint,omitempty"`
	Prime             []byte `protobuf:"bytes,3,opt,name=prime,proto3" json:"prime,omitempty"`
	Seq               int64  `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
	// The Node data for the node who owns this KeyPiece
	OwnerNode *Node `protobuf:"bytes,5,opt,name=owner_node,json=ownerNode" json:"owner_node,omitempty"`
	// The KeyStateMachine generation this key belongs to
	Generation int64 `protobuf:"varint,6,opt,name=generation" json:"generation,omitempty"`
}

func (m *KeyPiece) Reset()                    { *m = KeyPiece{} }
func (m *KeyPiece) String() string            { return proto.CompactTextString(m) }
func (*KeyPiece) ProtoMessage()               {}
func (*KeyPiece) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *KeyPiece) GetOwnerNode() *Node {
	if m != nil {
		return m.OwnerNode
	}
	return nil
}

type KeyPieceSend struct {
	Key        *KeyPiece `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	AddElement bool      `protobuf:"varint,2,opt,name=add_element,json=addElement" json:"add_element,omitempty"`
}

func (m *KeyPieceSend) Reset()                    { *m = KeyPieceSend{} }
func (m *KeyPieceSend) String() string            { return proto.CompactTextString(m) }
func (*KeyPieceSend) ProtoMessage()               {}
func (*KeyPieceSend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *KeyPieceSend) GetKey() *KeyPiece {
	if m != nil {
		return m.Key
	}
	return nil
}

type SendKeyPieceResponse struct {
	ClientMustCommit bool `protobuf:"varint,1,opt,name=client_must_commit,json=clientMustCommit" json:"client_must_commit,omitempty"`
}

func (m *SendKeyPieceResponse) Reset()                    { *m = SendKeyPieceResponse{} }
func (m *SendKeyPieceResponse) String() string            { return proto.CompactTextString(m) }
func (*SendKeyPieceResponse) ProtoMessage()               {}
func (*SendKeyPieceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "paranoid.EmptyMessage")
	proto.RegisterType((*Node)(nil), "paranoid.Node")
	proto.RegisterType((*JoinClusterRequest)(nil), "paranoid.JoinClusterRequest")
	proto.RegisterType((*NewGenerationRequest)(nil), "paranoid.NewGenerationRequest")
	proto.RegisterType((*NewGenerationResponse)(nil), "paranoid.NewGenerationResponse")
	proto.RegisterType((*KeyPieceRequest)(nil), "paranoid.KeyPieceRequest")
	proto.RegisterType((*KeyPiece)(nil), "paranoid.KeyPiece")
	proto.RegisterType((*KeyPieceSend)(nil), "paranoid.KeyPieceSend")
	proto.RegisterType((*SendKeyPieceResponse)(nil), "paranoid.SendKeyPieceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ParanoidNetwork service

type ParanoidNetworkClient interface {
	// Used for health checking and discovery. Sends the IP and port of the
	// PFSD instance running on the client.
	Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Used by a new node to let other nodes it is available to join the cluster.
	JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	// Used by a new node to create a new key generation before joining the cluster.
	NewGeneration(ctx context.Context, in *NewGenerationRequest, opts ...grpc.CallOption) (*NewGenerationResponse, error)
	// Cryptography calls
	SendKeyPiece(ctx context.Context, in *KeyPieceSend, opts ...grpc.CallOption) (*SendKeyPieceResponse, error)
	RequestKeyPiece(ctx context.Context, in *KeyPieceRequest, opts ...grpc.CallOption) (*KeyPiece, error)
}

type paranoidNetworkClient struct {
	cc *grpc.ClientConn
}

func NewParanoidNetworkClient(cc *grpc.ClientConn) ParanoidNetworkClient {
	return &paranoidNetworkClient{cc}
}

func (c *paranoidNetworkClient) Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/paranoid.ParanoidNetwork/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkClient) JoinCluster(ctx context.Context, in *JoinClusterRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/paranoid.ParanoidNetwork/JoinCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkClient) NewGeneration(ctx context.Context, in *NewGenerationRequest, opts ...grpc.CallOption) (*NewGenerationResponse, error) {
	out := new(NewGenerationResponse)
	err := grpc.Invoke(ctx, "/paranoid.ParanoidNetwork/NewGeneration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkClient) SendKeyPiece(ctx context.Context, in *KeyPieceSend, opts ...grpc.CallOption) (*SendKeyPieceResponse, error) {
	out := new(SendKeyPieceResponse)
	err := grpc.Invoke(ctx, "/paranoid.ParanoidNetwork/SendKeyPiece", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paranoidNetworkClient) RequestKeyPiece(ctx context.Context, in *KeyPieceRequest, opts ...grpc.CallOption) (*KeyPiece, error) {
	out := new(KeyPiece)
	err := grpc.Invoke(ctx, "/paranoid.ParanoidNetwork/RequestKeyPiece", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ParanoidNetwork service

type ParanoidNetworkServer interface {
	// Used for health checking and discovery. Sends the IP and port of the
	// PFSD instance running on the client.
	Ping(context.Context, *Node) (*EmptyMessage, error)
	// Used by a new node to let other nodes it is available to join the cluster.
	JoinCluster(context.Context, *JoinClusterRequest) (*EmptyMessage, error)
	// Used by a new node to create a new key generation before joining the cluster.
	NewGeneration(context.Context, *NewGenerationRequest) (*NewGenerationResponse, error)
	// Cryptography calls
	SendKeyPiece(context.Context, *KeyPieceSend) (*SendKeyPieceResponse, error)
	RequestKeyPiece(context.Context, *KeyPieceRequest) (*KeyPiece, error)
}

func RegisterParanoidNetworkServer(s *grpc.Server, srv ParanoidNetworkServer) {
	s.RegisterService(&_ParanoidNetwork_serviceDesc, srv)
}

func _ParanoidNetwork_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.ParanoidNetwork/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).Ping(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetwork_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.ParanoidNetwork/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).JoinCluster(ctx, req.(*JoinClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetwork_NewGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGenerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).NewGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.ParanoidNetwork/NewGeneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).NewGeneration(ctx, req.(*NewGenerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetwork_SendKeyPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPieceSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).SendKeyPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.ParanoidNetwork/SendKeyPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).SendKeyPiece(ctx, req.(*KeyPieceSend))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParanoidNetwork_RequestKeyPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyPieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParanoidNetworkServer).RequestKeyPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranoid.ParanoidNetwork/RequestKeyPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParanoidNetworkServer).RequestKeyPiece(ctx, req.(*KeyPieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ParanoidNetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paranoid.ParanoidNetwork",
	HandlerType: (*ParanoidNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ParanoidNetwork_Ping_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _ParanoidNetwork_JoinCluster_Handler,
		},
		{
			MethodName: "NewGeneration",
			Handler:    _ParanoidNetwork_NewGeneration_Handler,
		},
		{
			MethodName: "SendKeyPiece",
			Handler:    _ParanoidNetwork_SendKeyPiece_Handler,
		},
		{
			MethodName: "RequestKeyPiece",
			Handler:    _ParanoidNetwork_RequestKeyPiece_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x6e, 0xe2, 0xb4, 0x4a, 0x27, 0x6e, 0x92, 0x8e, 0x42, 0x15, 0x22, 0x94, 0x22, 0xc3, 0x01,
	0x09, 0x28, 0xa8, 0x1c, 0xb8, 0x53, 0x02, 0x08, 0x54, 0x2b, 0x5a, 0xd4, 0x0b, 0x17, 0xcb, 0x8d,
	0x87, 0xc8, 0x6a, 0xbc, 0xeb, 0xae, 0x1d, 0x45, 0x79, 0x0d, 0x9e, 0x89, 0xc7, 0xe1, 0x21, 0xd8,
	0x1f, 0x3b, 0x4e, 0x1b, 0xd3, 0x1b, 0xb7, 0xd9, 0xef, 0x5b, 0xcf, 0x37, 0xf3, 0xcd, 0x8e, 0x61,
	0x9c, 0x86, 0x32, 0xe4, 0x22, 0x8e, 0x38, 0xe5, 0x2b, 0x21, 0x6f, 0xde, 0x94, 0xe7, 0xb3, 0x54,
	0x8a, 0x5c, 0x60, 0xbb, 0x3c, 0x7b, 0x5d, 0x70, 0x27, 0x49, 0x9a, 0xaf, 0x2f, 0x29, 0xcb, 0xc2,
	0x39, 0x79, 0x01, 0xb4, 0x7c, 0x11, 0x11, 0x76, 0xa1, 0x19, 0xa7, 0xc3, 0xc6, 0xd3, 0xc6, 0x8b,
	0x43, 0xa6, 0x22, 0x44, 0x68, 0xa5, 0x42, 0xe6, 0xc3, 0xa6, 0x41, 0x4c, 0x8c, 0xa7, 0xd0, 0x99,
	0x89, 0x24, 0x11, 0x3c, 0xe0, 0x61, 0x42, 0x43, 0xc7, 0x50, 0x60, 0x21, 0x5f, 0x21, 0xfa, 0xa3,
	0xe5, 0x32, 0x8e, 0x86, 0x2d, 0xfb, 0x91, 0x8e, 0xbd, 0x5f, 0x0d, 0xc0, 0xaf, 0x22, 0xe6, 0x17,
	0x8b, 0x65, 0x96, 0x93, 0x64, 0x74, 0xbb, 0xa4, 0x2c, 0xff, 0x6f, 0x7a, 0xf8, 0x0c, 0x8e, 0x52,
	0x21, 0x16, 0x41, 0x1a, 0x66, 0x99, 0xb2, 0x22, 0x1a, 0xee, 0x1b, 0xd2, 0xd5, 0xe0, 0xb4, 0xc0,
	0xbc, 0x1c, 0x06, 0x3e, 0xad, 0x3e, 0x13, 0x27, 0x19, 0xe6, 0xb1, 0xe0, 0x65, 0x55, 0xef, 0xa1,
	0x27, 0x6d, 0x18, 0xf3, 0x79, 0xc0, 0x95, 0x31, 0xa6, 0xc4, 0xce, 0x79, 0xf7, 0x6c, 0xe3, 0xa8,
	0xb6, 0x8b, 0x75, 0xab, 0x6b, 0xc6, 0xbe, 0x1d, 0xd5, 0x66, 0x8d, 0xea, 0x0f, 0x78, 0x74, 0x4f,
	0x35, 0x4b, 0x05, 0xcf, 0x08, 0x5f, 0xc2, 0xf1, 0x7c, 0x83, 0x06, 0x7c, 0x99, 0x5c, 0x93, 0x34,
	0xc2, 0x0e, 0xeb, 0x57, 0x84, 0x6f, 0x70, 0x1c, 0xc0, 0x7e, 0x4a, 0x24, 0x33, 0x25, 0xe1, 0x28,
	0x09, 0x7b, 0xf0, 0xae, 0xa0, 0xf7, 0x8d, 0xd6, 0xd3, 0x98, 0x66, 0x54, 0x36, 0xe3, 0x41, 0xeb,
	0x81, 0x0e, 0x0c, 0x87, 0x63, 0x80, 0x4a, 0xc0, 0x14, 0xed, 0xb0, 0x2d, 0xc4, 0xfb, 0xdd, 0x80,
	0x76, 0x99, 0x57, 0xdb, 0x1d, 0x85, 0x79, 0x68, 0x12, 0xba, 0xcc, 0xc4, 0xf8, 0x1a, 0x50, 0xe5,
	0x25, 0x9e, 0x07, 0x3f, 0x95, 0x17, 0x24, 0x53, 0x19, 0x73, 0x3b, 0x45, 0x97, 0x1d, 0x5b, 0xe6,
	0x53, 0x45, 0x98, 0xe2, 0x65, 0x5c, 0x0c, 0xd3, 0x65, 0xf6, 0x80, 0x7d, 0x70, 0x32, 0xba, 0x35,
	0x63, 0x74, 0x98, 0x0e, 0x55, 0x5a, 0x10, 0x2b, 0x55, 0x85, 0x9d, 0xc1, 0x7e, 0x6d, 0x07, 0x87,
	0xe6, 0x86, 0xbf, 0xdb, 0xc6, 0xc1, 0x4e, 0x1b, 0x57, 0xe0, 0x96, 0x5d, 0x7c, 0x27, 0x1e, 0xe1,
	0x73, 0x70, 0x6e, 0x68, 0x5d, 0x38, 0x83, 0x55, 0xde, 0x8d, 0x85, 0x9a, 0xd6, 0xef, 0x2f, 0x8c,
	0xa2, 0x80, 0x16, 0x94, 0x50, 0xd1, 0x54, 0x9b, 0x81, 0x82, 0x26, 0x16, 0xf1, 0x3e, 0xc2, 0x40,
	0xa7, 0xab, 0x8c, 0x2f, 0xe6, 0xf9, 0x0a, 0x70, 0xb6, 0x88, 0xb5, 0x29, 0x89, 0x7a, 0xf4, 0x81,
	0x7e, 0xb1, 0x71, 0x6e, 0xd4, 0xda, 0xac, 0x6f, 0x99, 0x4b, 0x45, 0x5c, 0x18, 0xfc, 0xfc, 0x4f,
	0x13, 0x7a, 0xd3, 0xa2, 0x02, 0xdf, 0xee, 0x2f, 0xbe, 0x85, 0xd6, 0x54, 0xd9, 0x86, 0xf7, 0x7a,
	0x1e, 0x9d, 0x54, 0xe7, 0x3b, 0x6b, 0xbc, 0x87, 0x13, 0xe8, 0x6c, 0xad, 0x19, 0x3e, 0xa9, 0x2e,
	0xee, 0x6e, 0xdf, 0x03, 0x69, 0x18, 0x1c, 0xdd, 0x79, 0xa3, 0x38, 0xde, 0xaa, 0xa0, 0x66, 0x65,
	0x46, 0xa7, 0xff, 0xe4, 0xad, 0x19, 0x2a, 0xe7, 0x17, 0x70, 0xb7, 0x6d, 0xc2, 0x93, 0x5d, 0xc3,
	0x35, 0x3f, 0xda, 0x92, 0xaa, 0xb3, 0x55, 0x65, 0xfa, 0x00, 0xbd, 0x42, 0x77, 0x93, 0xec, 0x71,
	0xcd, 0xf4, 0x8a, 0xd2, 0x6a, 0x06, 0xeb, 0xed, 0x5d, 0x1f, 0x98, 0x5f, 0xe2, 0xbb, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x77, 0x2b, 0xcd, 0x79, 0x34, 0x05, 0x00, 0x00,
}
