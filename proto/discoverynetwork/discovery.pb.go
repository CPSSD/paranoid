// Code generated by protoc-gen-go.
// source: discoverynetwork/discovery.proto
// DO NOT EDIT!

/*
Package discoverynetwork is a generated protocol buffer package.

It is generated from these files:
	discoverynetwork/discovery.proto

It has these top-level messages:
	EmptyMessage
	DisconnectRequest
	JoinRequest
	JoinResponse
	Node
*/
package discoverynetwork

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()         { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()    {}

type DisconnectRequest struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *DisconnectRequest) Reset()         { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()    {}

func (m *DisconnectRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type JoinRequest struct {
	Pool string `protobuf:"bytes,1,opt,name=pool" json:"pool,omitempty"`
	Node *Node  `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}

func (m *JoinRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type JoinResponse struct {
	// The time after which the server will remove the node from the list
	// if the node doesn't make the Renew RPC call
	ResetInterval int64   `protobuf:"varint,1,opt,name=resetInterval" json:"resetInterval,omitempty"`
	Nodes         []*Node `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *JoinResponse) Reset()         { *m = JoinResponse{} }
func (m *JoinResponse) String() string { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()    {}

func (m *JoinResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Node struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for DiscoveryNetwork service

type DiscoveryNetworkClient interface {
	// Discovery Calls
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
	Renew(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type discoveryNetworkClient struct {
	cc *grpc.ClientConn
}

func NewDiscoveryNetworkClient(cc *grpc.ClientConn) DiscoveryNetworkClient {
	return &discoveryNetworkClient{cc}
}

func (c *discoveryNetworkClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := grpc.Invoke(ctx, "/discoverynetwork.DiscoveryNetwork/Join", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryNetworkClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/discoverynetwork.DiscoveryNetwork/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryNetworkClient) Renew(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/discoverynetwork.DiscoveryNetwork/Renew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiscoveryNetwork service

type DiscoveryNetworkServer interface {
	// Discovery Calls
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Disconnect(context.Context, *DisconnectRequest) (*EmptyMessage, error)
	Renew(context.Context, *JoinRequest) (*EmptyMessage, error)
}

func RegisterDiscoveryNetworkServer(s *grpc.Server, srv DiscoveryNetworkServer) {
	s.RegisterService(&_DiscoveryNetwork_serviceDesc, srv)
}

func _DiscoveryNetwork_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DiscoveryNetworkServer).Join(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _DiscoveryNetwork_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DiscoveryNetworkServer).Disconnect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _DiscoveryNetwork_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(DiscoveryNetworkServer).Renew(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _DiscoveryNetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discoverynetwork.DiscoveryNetwork",
	HandlerType: (*DiscoveryNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _DiscoveryNetwork_Join_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _DiscoveryNetwork_Disconnect_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _DiscoveryNetwork_Renew_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
