// Raft API v0.1.0

syntax = "proto3";

package raft;

service RaftNetwork {

    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
	rpc ClientToLeaderRequest (EntryRequest) returns (EmptyMessage) {}
}

message EmptyMessage {}

message EntryRequest {
	Entry entry = 1; //required
}

message AppendEntriesRequest {
    uint64 term = 1; // required
    string leader_id = 2; // required

    uint64 prev_log_index = 3; // required
    uint64 prev_log_term = 4; // required

    repeated Entry entries = 5; // optional
    uint64 leader_commit = 6; // required
}

//Will be replaced with pfs commands
message StateMachineCommand {
    uint64 number = 1; // required 
}

message Node {
    string ip = 1; // required
    string port = 2; // required
    string common_name = 3; // required
    string node_id = 4; // required
}

message Configuration {
    repeated Node nodes = 1; // required
}

message Entry {
    enum EntryType {
      StateMachineCommand = 0;
      ConfigurationChange = 1;
    }
    EntryType type = 1; // required 
    string uuid = 2; // required
    StateMachineCommand command = 3; // optional 
    Configuration config = 4; // optional 
}

message AppendEntriesResponse {
    uint64 term = 1; // required
    bool success = 2; // required
}

message RequestVoteRequest {
    uint64 term = 1; // required
    string candidate_id = 2; // required

    uint64 last_log_index = 3; // required
    uint64 last_log_term = 4; // required
}

message RequestVoteResponse {
    uint64 term = 1; // required
    bool vote_granted = 2; // required
}
