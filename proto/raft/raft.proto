// Raft API v0.1.0

syntax = "proto3";

package raft;

service RaftNetwork {
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
    rpc ClientToLeaderRequest (EntryRequest) returns (EmptyMessage) {}
    rpc InstallSnapshot (SnapshotRequest) returns (SnapshotResponse) {}
}

message EmptyMessage {}

message EntryRequest {
    string sender_id = 1; // required
    Entry entry = 2; // required
}

message AppendEntriesRequest {
    uint64 term = 1; // required
    string leader_id = 2; // required

    uint64 prev_log_index = 3; // required
    uint64 prev_log_term = 4; // required

    repeated Entry entries = 5; // optional
    uint64 leader_commit = 6; // required
}

message StateMachineCommand {
    uint32 type = 1; // required
    string path = 2; // required

    //Used for Write command
    bytes data = 3;  // optional
    int64 offset = 4;  // optional

   	//Used for Write and Truncate commands
    int64 length = 5;  // optional

    //Used for Link and Rename commands
    string old_path = 6;  // optional
    string new_path = 7;  // optional

    //Used for Create, Chmod and Mkdir commands
    uint32 mode = 8;  // optional

    //Used for Utimes command
    int64 access_seconds = 9;  // optional
    int64 access_nanoseconds = 10;  // optional
    int64 modify_seconds = 11;  // optional
    int64 modify_nanoseconds = 12;  // optional
}

message KeyStateCommand {
    enum KSMType {
        UpdateKeyPiece = 0;
        NewGeneration = 1;
    }
    KSMType type = 1;

    // UpdateKeyPiece arguments
    Node key_owner = 2;     // optional
    Node key_holder = 3;    // optional
    int64 generation = 4;   // optional

    // NewGeneration arguments
    string new_node = 5;  // optional
}

message Node {
    string ip = 1; // required
    string port = 2; // required
    string common_name = 3; // required
    string node_id = 4; // required
}

message Configuration {
    enum ConfigurationType {
      CurrentConfiguration = 0;
      FutureConfiguration = 1;
    }
    ConfigurationType type = 1; // required
    repeated Node nodes = 2; // required
}

message DemoCommand {
    uint64 number = 1; // required
}

message Entry {
    enum EntryType {
      StateMachineCommand = 0;
      ConfigurationChange = 1;
      Demo = 2;
      KeyStateCommand = 3;
    }
    EntryType type = 1; // required 
    string uuid = 2; // required
    StateMachineCommand command = 3; // optional 
    Configuration config = 4; // optional 
    DemoCommand demo = 5; // optional
    KeyStateCommand key_command = 6; // optional
}

message LogEntry {
    uint64 term = 1; // required 
    Entry entry = 2; // required
}

message AppendEntriesResponse {
    uint64 term = 1; // required
    uint64 next_index = 2; // required
    bool success = 3; // required
}

message RequestVoteRequest {
    uint64 term = 1; // required
    string candidate_id = 2; // required

    uint64 last_log_index = 3; // required
    uint64 last_log_term = 4; // required
}

message RequestVoteResponse {
    uint64 term = 1; // required
    bool vote_granted = 2; // required
}

message SnapshotRequest {
    uint64 term = 1; // required
    string leader_id = 2; // required
   
    uint64 last_included_index = 3; // required 
    uint64 last_included_term = 4; // required 

    uint64 offset = 5; // required
    bytes data = 6;  // required 

    bool done = 7; // required
}

message SnapshotResponse {
    uint64 term = 1; // required
}
