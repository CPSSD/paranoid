// Code generated by protoc-gen-go.
// source: raft/raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft/raft.proto

It has these top-level messages:
	EmptyMessage
	EntryRequest
	AppendEntriesRequest
	StateMachineCommand
	Node
	Configuration
	DemoCommand
	Entry
	LogEntry
	AppendEntriesResponse
	RequestVoteRequest
	RequestVoteResponse
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Configuration_ConfigurationType int32

const (
	Configuration_CurrentConfiguration Configuration_ConfigurationType = 0
	Configuration_FutureConfiguration  Configuration_ConfigurationType = 1
)

var Configuration_ConfigurationType_name = map[int32]string{
	0: "CurrentConfiguration",
	1: "FutureConfiguration",
}
var Configuration_ConfigurationType_value = map[string]int32{
	"CurrentConfiguration": 0,
	"FutureConfiguration":  1,
}

func (x Configuration_ConfigurationType) String() string {
	return proto.EnumName(Configuration_ConfigurationType_name, int32(x))
}
func (Configuration_ConfigurationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type Entry_EntryType int32

const (
	Entry_StateMachineCommand Entry_EntryType = 0
	Entry_ConfigurationChange Entry_EntryType = 1
	Entry_Demo                Entry_EntryType = 2
)

var Entry_EntryType_name = map[int32]string{
	0: "StateMachineCommand",
	1: "ConfigurationChange",
	2: "Demo",
}
var Entry_EntryType_value = map[string]int32{
	"StateMachineCommand": 0,
	"ConfigurationChange": 1,
	"Demo":                2,
}

func (x Entry_EntryType) String() string {
	return proto.EnumName(Entry_EntryType_name, int32(x))
}
func (Entry_EntryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EntryRequest struct {
	SenderId string `protobuf:"bytes,1,opt,name=sender_id" json:"sender_id,omitempty"`
	Entry    *Entry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *EntryRequest) Reset()                    { *m = EntryRequest{} }
func (m *EntryRequest) String() string            { return proto.CompactTextString(m) }
func (*EntryRequest) ProtoMessage()               {}
func (*EntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EntryRequest) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type AppendEntriesRequest struct {
	Term         uint64   `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId     string   `protobuf:"bytes,2,opt,name=leader_id" json:"leader_id,omitempty"`
	PrevLogIndex uint64   `protobuf:"varint,3,opt,name=prev_log_index" json:"prev_log_index,omitempty"`
	PrevLogTerm  uint64   `protobuf:"varint,4,opt,name=prev_log_term" json:"prev_log_term,omitempty"`
	Entries      []*Entry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	LeaderCommit uint64   `protobuf:"varint,6,opt,name=leader_commit" json:"leader_commit,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendEntriesRequest) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type StateMachineCommand struct {
	Type uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// Used for Write command
	Data   []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Offset int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	// Used for Write and Truncate commands
	Length int64 `protobuf:"varint,5,opt,name=length" json:"length,omitempty"`
	// Used for Link and Rename commands
	OldPath string `protobuf:"bytes,6,opt,name=old_path" json:"old_path,omitempty"`
	NewPath string `protobuf:"bytes,7,opt,name=new_path" json:"new_path,omitempty"`
	// Used for Create, Chmod and Mkdir commands
	Mode uint32 `protobuf:"varint,8,opt,name=mode" json:"mode,omitempty"`
	// Used for Utimes command
	AccessSeconds     int64 `protobuf:"varint,9,opt,name=access_seconds" json:"access_seconds,omitempty"`
	AccessNanoseconds int64 `protobuf:"varint,10,opt,name=access_nanoseconds" json:"access_nanoseconds,omitempty"`
	ModifySeconds     int64 `protobuf:"varint,11,opt,name=modify_seconds" json:"modify_seconds,omitempty"`
	ModifyNanoseconds int64 `protobuf:"varint,12,opt,name=modify_nanoseconds" json:"modify_nanoseconds,omitempty"`
}

func (m *StateMachineCommand) Reset()                    { *m = StateMachineCommand{} }
func (m *StateMachineCommand) String() string            { return proto.CompactTextString(m) }
func (*StateMachineCommand) ProtoMessage()               {}
func (*StateMachineCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Node struct {
	Ip         string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port       string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	CommonName string `protobuf:"bytes,3,opt,name=common_name" json:"common_name,omitempty"`
	NodeId     string `protobuf:"bytes,4,opt,name=node_id" json:"node_id,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Configuration struct {
	Type  Configuration_ConfigurationType `protobuf:"varint,1,opt,name=type,enum=raft.Configuration_ConfigurationType" json:"type,omitempty"`
	Nodes []*Node                         `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Configuration) Reset()                    { *m = Configuration{} }
func (m *Configuration) String() string            { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()               {}
func (*Configuration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Configuration) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type DemoCommand struct {
	Number uint64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *DemoCommand) Reset()                    { *m = DemoCommand{} }
func (m *DemoCommand) String() string            { return proto.CompactTextString(m) }
func (*DemoCommand) ProtoMessage()               {}
func (*DemoCommand) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Entry struct {
	Type    Entry_EntryType      `protobuf:"varint,1,opt,name=type,enum=raft.Entry_EntryType" json:"type,omitempty"`
	Uuid    string               `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	Command *StateMachineCommand `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
	Config  *Configuration       `protobuf:"bytes,4,opt,name=config" json:"config,omitempty"`
	Demo    *DemoCommand         `protobuf:"bytes,5,opt,name=demo" json:"demo,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Entry) GetCommand() *StateMachineCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Entry) GetConfig() *Configuration {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Entry) GetDemo() *DemoCommand {
	if m != nil {
		return m.Demo
	}
	return nil
}

type LogEntry struct {
	Term  uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Entry *Entry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LogEntry) GetEntry() *Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type AppendEntriesResponse struct {
	Term      uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	NextIndex uint64 `protobuf:"varint,2,opt,name=next_index" json:"next_index,omitempty"`
	Success   bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type RequestVoteRequest struct {
	Term         uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId  string `protobuf:"bytes,2,opt,name=candidate_id" json:"candidate_id,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=last_log_index" json:"last_log_index,omitempty"`
	LastLogTerm  uint64 `protobuf:"varint,4,opt,name=last_log_term" json:"last_log_term,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type RequestVoteResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=vote_granted" json:"vote_granted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "raft.EmptyMessage")
	proto.RegisterType((*EntryRequest)(nil), "raft.EntryRequest")
	proto.RegisterType((*AppendEntriesRequest)(nil), "raft.AppendEntriesRequest")
	proto.RegisterType((*StateMachineCommand)(nil), "raft.StateMachineCommand")
	proto.RegisterType((*Node)(nil), "raft.Node")
	proto.RegisterType((*Configuration)(nil), "raft.Configuration")
	proto.RegisterType((*DemoCommand)(nil), "raft.DemoCommand")
	proto.RegisterType((*Entry)(nil), "raft.Entry")
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
	proto.RegisterType((*AppendEntriesResponse)(nil), "raft.AppendEntriesResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "raft.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "raft.RequestVoteResponse")
	proto.RegisterEnum("raft.Configuration_ConfigurationType", Configuration_ConfigurationType_name, Configuration_ConfigurationType_value)
	proto.RegisterEnum("raft.Entry_EntryType", Entry_EntryType_name, Entry_EntryType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RaftNetwork service

type RaftNetworkClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	ClientToLeaderRequest(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type raftNetworkClient struct {
	cc *grpc.ClientConn
}

func NewRaftNetworkClient(cc *grpc.ClientConn) RaftNetworkClient {
	return &raftNetworkClient{cc}
}

func (c *raftNetworkClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/raft.RaftNetwork/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNetworkClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/raft.RaftNetwork/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNetworkClient) ClientToLeaderRequest(ctx context.Context, in *EntryRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := grpc.Invoke(ctx, "/raft.RaftNetwork/ClientToLeaderRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftNetwork service

type RaftNetworkServer interface {
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	ClientToLeaderRequest(context.Context, *EntryRequest) (*EmptyMessage, error)
}

func RegisterRaftNetworkServer(s *grpc.Server, srv RaftNetworkServer) {
	s.RegisterService(&_RaftNetwork_serviceDesc, srv)
}

func _RaftNetwork_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftNetworkServer).AppendEntries(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RaftNetwork_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftNetworkServer).RequestVote(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RaftNetwork_ClientToLeaderRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(EntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftNetworkServer).ClientToLeaderRequest(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RaftNetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftNetwork",
	HandlerType: (*RaftNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RaftNetwork_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftNetwork_RequestVote_Handler,
		},
		{
			MethodName: "ClientToLeaderRequest",
			Handler:    _RaftNetwork_ClientToLeaderRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x4e, 0xdb, 0x58,
	0x14, 0xc6, 0x21, 0xbf, 0xc7, 0x49, 0x08, 0x37, 0x64, 0x30, 0x99, 0x19, 0x0d, 0x32, 0x1a, 0x69,
	0x34, 0x0b, 0x46, 0x0a, 0xb3, 0xe9, 0xa2, 0x0b, 0x14, 0x4a, 0x25, 0x04, 0x2c, 0x28, 0xea, 0x36,
	0x32, 0xce, 0x89, 0xb1, 0x1a, 0xdf, 0xeb, 0xda, 0xd7, 0x40, 0x9e, 0xa5, 0x0f, 0xd0, 0xf7, 0xea,
	0x3b, 0x74, 0xd1, 0x5d, 0xcf, 0xbd, 0xd7, 0x0e, 0x31, 0x58, 0xdd, 0x58, 0x39, 0x7f, 0xdf, 0xf9,
	0xce, 0xcf, 0x3d, 0x81, 0x9d, 0xc4, 0x5b, 0xc8, 0xff, 0xd4, 0xe7, 0x38, 0x4e, 0x84, 0x14, 0xac,
	0xae, 0x7e, 0xbb, 0x7d, 0xe8, 0xbe, 0x8b, 0x62, 0xb9, 0xba, 0xc2, 0x34, 0xf5, 0x02, 0x74, 0xdf,
	0x92, 0xcc, 0x65, 0xb2, 0xba, 0xc1, 0xcf, 0x19, 0xa6, 0x92, 0xed, 0x42, 0x27, 0x45, 0x3e, 0xc7,
	0x64, 0x16, 0xce, 0x1d, 0xeb, 0xd0, 0xfa, 0xa7, 0xc3, 0xc6, 0xd0, 0x40, 0xe5, 0xe2, 0xd4, 0x48,
	0xb4, 0x27, 0xf6, 0xb1, 0x06, 0xd5, 0x51, 0xee, 0x17, 0x0b, 0xf6, 0x4e, 0xe3, 0x98, 0x22, 0x94,
	0x1c, 0x62, 0x5a, 0xe0, 0x74, 0xa1, 0x2e, 0x31, 0x89, 0x34, 0x44, 0x5d, 0xa1, 0x2e, 0xd1, 0xcb,
	0x51, 0x6b, 0x1a, 0xf5, 0x37, 0xe8, 0xc7, 0x09, 0x3e, 0xcc, 0x96, 0x22, 0x98, 0x85, 0x94, 0xf0,
	0xc9, 0xd9, 0xd6, 0xae, 0x23, 0xe8, 0xad, 0xf5, 0x1a, 0xa1, 0xae, 0xd5, 0x7f, 0x40, 0x0b, 0x4d,
	0x06, 0xa7, 0x71, 0xb8, 0xfd, 0x82, 0x86, 0x0a, 0xca, 0xf1, 0x7d, 0x11, 0x45, 0xa1, 0x74, 0x9a,
	0x2a, 0xc8, 0xfd, 0x61, 0xc1, 0xf0, 0x83, 0xf4, 0x24, 0x5e, 0x79, 0xfe, 0x7d, 0xc8, 0x71, 0x4a,
	0x46, 0x8f, 0xcf, 0x35, 0xb9, 0x55, 0x8c, 0x9a, 0x5c, 0x4f, 0x49, 0xb1, 0x27, 0xef, 0x73, 0x5e,
	0x24, 0xcd, 0x3d, 0xe9, 0x69, 0x36, 0x5d, 0xd6, 0x87, 0xa6, 0x58, 0x2c, 0x52, 0x94, 0x9a, 0xc6,
	0xb6, 0x92, 0x97, 0xc8, 0x03, 0xf2, 0x6e, 0x68, 0x79, 0x00, 0x6d, 0xb1, 0x9c, 0xcf, 0x74, 0x7c,
	0x53, 0xc7, 0x93, 0x86, 0xe3, 0xa3, 0xd1, 0xb4, 0x0a, 0xc4, 0x48, 0xcc, 0xd1, 0x69, 0xeb, 0x6c,
	0x54, 0xb7, 0xe7, 0xfb, 0xd4, 0xfd, 0x59, 0x8a, 0xbe, 0xe0, 0xf3, 0xd4, 0xe9, 0x68, 0xa4, 0x31,
	0xb0, 0x5c, 0xcf, 0x3d, 0x2e, 0x0a, 0x1b, 0x68, 0x1b, 0xc5, 0x10, 0x42, 0xb8, 0x58, 0xad, 0x63,
	0xec, 0x22, 0x26, 0xd7, 0x6f, 0xc6, 0x74, 0x95, 0xcd, 0x3d, 0x87, 0xfa, 0x35, 0x65, 0x65, 0x00,
	0xb5, 0x30, 0xce, 0x27, 0xa9, 0x2a, 0x15, 0x89, 0xcc, 0x2b, 0x1d, 0x82, 0xad, 0xba, 0x25, 0x38,
	0x45, 0x47, 0xa8, 0x0b, 0xee, 0xb0, 0x1d, 0x68, 0x71, 0x0a, 0x53, 0x73, 0x52, 0x15, 0x77, 0xdc,
	0xaf, 0x16, 0xf4, 0xa6, 0x82, 0x2f, 0xc2, 0x20, 0x4b, 0x3c, 0x19, 0x0a, 0xce, 0x4e, 0x36, 0xba,
	0xd7, 0x9f, 0xfc, 0x6d, 0xe6, 0x50, 0x72, 0x29, 0x4b, 0xb7, 0xe4, 0xcc, 0x0e, 0xa0, 0xa1, 0x70,
	0x53, 0xca, 0xad, 0xa6, 0x07, 0x26, 0x4a, 0x31, 0x24, 0xa6, 0xbb, 0xaf, 0xfd, 0x1d, 0xd8, 0x9b,
	0x66, 0x49, 0x42, 0x33, 0x2f, 0xd9, 0x06, 0x5b, 0x6c, 0x1f, 0x86, 0xe7, 0x99, 0xcc, 0x12, 0x2c,
	0x1b, 0x2c, 0xf7, 0x4f, 0xb0, 0xcf, 0x30, 0x12, 0xc5, 0x90, 0x69, 0x54, 0x3c, 0x8b, 0xee, 0x30,
	0x31, 0x3b, 0xe8, 0x7e, 0xb7, 0xa0, 0x61, 0xb6, 0xe5, 0xa8, 0x54, 0xc0, 0x68, 0x63, 0x91, 0xcc,
	0x57, 0x13, 0xa0, 0x5e, 0x65, 0xd9, 0x7a, 0x5b, 0xff, 0x85, 0x96, 0x6f, 0x70, 0x75, 0x9f, 0xec,
	0xc9, 0x81, 0x89, 0xaa, 0xda, 0xae, 0x23, 0x68, 0xfa, 0x9a, 0x9a, 0xee, 0xa0, 0x3d, 0x19, 0x56,
	0x74, 0x88, 0xfd, 0x45, 0x6b, 0x46, 0x64, 0xf5, 0x1a, 0xd9, 0x93, 0x5d, 0xe3, 0xb2, 0x41, 0xdf,
	0x7d, 0x0f, 0x9d, 0x67, 0x32, 0xfb, 0x95, 0x7b, 0x6c, 0x9a, 0x51, 0xc2, 0x9d, 0xde, 0x7b, 0x3c,
	0xc0, 0x81, 0xc5, 0xda, 0x50, 0x57, 0x68, 0x83, 0x9a, 0xfb, 0x3f, 0xb4, 0x2f, 0x45, 0x60, 0x2a,
	0x2f, 0xbf, 0xca, 0x5f, 0x3d, 0xec, 0x0b, 0x18, 0xbd, 0x78, 0xd7, 0x69, 0x2c, 0x78, 0x8a, 0x2f,
	0x20, 0x68, 0xbd, 0x38, 0x3e, 0xc9, 0xfc, 0x05, 0xd7, 0xb4, 0x8e, 0x56, 0x28, 0xcd, 0xf4, 0x2a,
	0xeb, 0x5e, 0xb5, 0xdd, 0x00, 0x58, 0x7e, 0x16, 0x3e, 0x0a, 0x89, 0xd5, 0x17, 0x62, 0x0f, 0xba,
	0x3e, 0x95, 0x14, 0xd2, 0xdb, 0xc3, 0xd2, 0x91, 0x58, 0x7a, 0xa9, 0xac, 0x3a, 0x12, 0x6b, 0xfd,
	0xf3, 0x91, 0x70, 0xdf, 0xc0, 0xb0, 0x94, 0xa8, 0x92, 0x32, 0x65, 0x7a, 0x20, 0xeb, 0x2c, 0x48,
	0x3c, 0x2e, 0xd1, 0x64, 0x6a, 0x4f, 0xbe, 0x59, 0x60, 0xdf, 0x50, 0xf9, 0xd7, 0x28, 0x1f, 0x45,
	0xf2, 0x89, 0x5d, 0x40, 0xaf, 0x54, 0x3f, 0x1b, 0x9b, 0xee, 0x54, 0x1d, 0xbb, 0xf1, 0xef, 0x95,
	0x36, 0x93, 0xdd, 0xdd, 0x62, 0x67, 0x04, 0xfd, 0x4c, 0x8b, 0x39, 0xc6, 0xfb, 0x75, 0x4b, 0xc6,
	0x07, 0x15, 0x96, 0x35, 0xca, 0x29, 0x8c, 0xa6, 0xcb, 0x90, 0x06, 0x76, 0x2b, 0x2e, 0xf5, 0xad,
	0x2b, 0x1a, 0xc9, 0x36, 0xe6, 0x56, 0x20, 0x15, 0xba, 0xcd, 0x53, 0xbf, 0x75, 0xd7, 0xd4, 0xff,
	0x04, 0x27, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xf1, 0x6d, 0x12, 0x1c, 0x06, 0x00, 0x00,
}
