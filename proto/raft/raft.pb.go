// Code generated by protoc-gen-go.
// source: raft/raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft/raft.proto

It has these top-level messages:
	EmptyMessage
	AppendEntriesRequest
	Entry
	AppendEntriesResponse
	RequestVoteRequest
	RequestVoteResponse
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AppendEntriesRequest struct {
	Term         uint64   `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId     string   `protobuf:"bytes,2,opt,name=leader_id" json:"leader_id,omitempty"`
	PrevLogIndex uint64   `protobuf:"varint,3,opt,name=prev_log_index" json:"prev_log_index,omitempty"`
	PrevLogTerm  uint64   `protobuf:"varint,4,opt,name=prev_log_term" json:"prev_log_term,omitempty"`
	Entries      []*Entry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	LeaderCommit uint64   `protobuf:"varint,6,opt,name=leader_commit" json:"leader_commit,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppendEntriesRequest) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// Will be replaced with pfs commands
type Entry struct {
	Number uint64 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type AppendEntriesResponse struct {
	Term    uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RequestVoteRequest struct {
	Term         uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId  string `protobuf:"bytes,2,opt,name=candidate_id" json:"candidate_id,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=last_log_index" json:"last_log_index,omitempty"`
	LastLogTerm  uint64 `protobuf:"varint,4,opt,name=last_log_term" json:"last_log_term,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RequestVoteResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=vote_granted" json:"vote_granted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "raft.EmptyMessage")
	proto.RegisterType((*AppendEntriesRequest)(nil), "raft.AppendEntriesRequest")
	proto.RegisterType((*Entry)(nil), "raft.Entry")
	proto.RegisterType((*AppendEntriesResponse)(nil), "raft.AppendEntriesResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "raft.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "raft.RequestVoteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for RaftNetwork service

type RaftNetworkClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
}

type raftNetworkClient struct {
	cc *grpc.ClientConn
}

func NewRaftNetworkClient(cc *grpc.ClientConn) RaftNetworkClient {
	return &raftNetworkClient{cc}
}

func (c *raftNetworkClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/raft.RaftNetwork/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNetworkClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/raft.RaftNetwork/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftNetwork service

type RaftNetworkServer interface {
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
}

func RegisterRaftNetworkServer(s *grpc.Server, srv RaftNetworkServer) {
	s.RegisterService(&_RaftNetwork_serviceDesc, srv)
}

func _RaftNetwork_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftNetworkServer).AppendEntries(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RaftNetwork_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftNetworkServer).RequestVote(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RaftNetwork_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftNetwork",
	HandlerType: (*RaftNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RaftNetwork_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftNetwork_RequestVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x4f, 0xf2, 0x40,
	0x10, 0x7e, 0xfb, 0x52, 0xbe, 0x86, 0xaf, 0xb8, 0x82, 0x56, 0xf4, 0x40, 0xf6, 0xc4, 0x09, 0x13,
	0x4c, 0x4c, 0x3c, 0x9a, 0xc8, 0xc5, 0x44, 0x0f, 0x1c, 0xbc, 0x36, 0x4b, 0x3b, 0x36, 0x8d, 0x74,
	0xb7, 0xee, 0x0e, 0x28, 0xbf, 0xc5, 0x83, 0x7f, 0xd5, 0xb6, 0x8b, 0x10, 0xb0, 0x97, 0xa6, 0x79,
	0x9e, 0x99, 0xe7, 0x63, 0x5a, 0xe8, 0x69, 0xf1, 0x4a, 0xd7, 0xf9, 0x63, 0x92, 0x6a, 0x45, 0x8a,
	0xb9, 0xf9, 0x3b, 0xef, 0x42, 0x7b, 0x96, 0xa4, 0xb4, 0x79, 0x42, 0x63, 0x44, 0x84, 0xfc, 0xcb,
	0x81, 0xfe, 0x7d, 0x9a, 0xa2, 0x0c, 0x67, 0x92, 0x74, 0x8c, 0x66, 0x8e, 0xef, 0x2b, 0x34, 0xc4,
	0xda, 0xe0, 0x12, 0xea, 0xc4, 0x73, 0x46, 0xce, 0xd8, 0x65, 0x27, 0xd0, 0x5c, 0xa2, 0x08, 0x51,
	0xfb, 0x71, 0xe8, 0xfd, 0xcf, 0xa0, 0x26, 0x3b, 0x83, 0x6e, 0xaa, 0x71, 0xed, 0x2f, 0x55, 0xe4,
	0xc7, 0x32, 0xc4, 0x4f, 0xaf, 0x52, 0x8c, 0x0e, 0xa0, 0xb3, 0xc3, 0x0b, 0x05, 0xb7, 0x80, 0xaf,
	0xa0, 0x8e, 0xd6, 0xc1, 0xab, 0x8e, 0x2a, 0xe3, 0xd6, 0xb4, 0x35, 0x29, 0xc2, 0xe5, 0xb6, 0x9b,
	0x7c, 0x69, 0xab, 0x1f, 0xa8, 0x24, 0x89, 0xc9, 0xab, 0xe5, 0x4b, 0xfc, 0x1c, 0xaa, 0x96, 0xef,
	0x42, 0x4d, 0xae, 0x92, 0x05, 0x6a, 0x9b, 0x87, 0xdf, 0xc2, 0xe0, 0x28, 0xb5, 0x49, 0x95, 0x34,
	0x78, 0x14, 0xbb, 0x07, 0x75, 0xb3, 0x0a, 0x82, 0xac, 0x6b, 0x11, 0xba, 0xc1, 0x23, 0x60, 0xdb,
	0x82, 0x2f, 0x8a, 0xb0, 0xbc, 0x6b, 0x1f, 0xda, 0x81, 0x90, 0x61, 0x1c, 0x0a, 0xc2, 0x83, 0xba,
	0x4b, 0x61, 0xa8, 0xac, 0xee, 0x0e, 0xdf, 0xd7, 0xe5, 0x77, 0x70, 0x7a, 0x60, 0x54, 0x1a, 0x2f,
	0x73, 0x5a, 0x67, 0xac, 0x1f, 0x69, 0x21, 0x09, 0xad, 0x53, 0x63, 0xfa, 0xed, 0x40, 0x6b, 0x9e,
	0x9d, 0xe6, 0x19, 0xe9, 0x43, 0xe9, 0x37, 0xf6, 0x08, 0x9d, 0x83, 0xae, 0x6c, 0x68, 0x2f, 0x57,
	0xf6, 0xd9, 0x86, 0x97, 0xa5, 0x9c, 0x75, 0xe7, 0xff, 0xd8, 0x43, 0x26, 0xbd, 0x8f, 0xc5, 0x3c,
	0x3b, 0xfd, 0xf7, 0x24, 0xc3, 0x8b, 0x12, 0xe6, 0x57, 0x65, 0x51, 0x2b, 0xfe, 0xa8, 0x9b, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xe0, 0xfc, 0xb1, 0x64, 0x02, 0x00, 0x00,
}
